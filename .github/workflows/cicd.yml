permissions:
  contents: write

on:
    - push
    - pull_request

concurrency:
  group: ${{ github.workflow }}

name: ci/cd
jobs:
  cicd:
    runs-on: ${{ matrix.platform }}
    name: ${{ matrix.label }}
    outputs:
      COMMITTER_IS_NEW: ${{ steps.tag.outputs.COMMITTER_IS_NEW }}
      COMMITTER_TAG: ${{ steps.tag.outputs.COMMITTER_TAG }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: "macos-latest" # for Arm based macs (M1 and above).
          #   args: "--target aarch64-apple-darwin"
          #   label: macos (silicon)
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
            label: macos (intel)
          # - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ""
          #   label: ubuntu
          # - platform: "windows-latest"
          #   args: ""
          #   label: windows
    steps:
      - name: checkout codebase
        uses: actions/checkout@v4
        with:
          submodules: true

        ### Install languages and runtimes ###
      - name: install bun
        uses: oven-sh/setup-bun@v1

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: llvm-tools-preview, rustfmt, clippy

        ### Caching ###
      - name: bun cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: rust cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          save-always: true
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

        ### Install language dependencies ###
      - name: install bun dependencies
        run: bun install

      - name: install rust development tools
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: install rust dependencies (ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install rust dependencies (macos intel)
        if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
        run: |
          rustup target add x86_64-apple-darwin

      - name: install cargo check tools
        run: |
          cargo install --locked cargo-deny || true
          cargo install --locked cargo-outdated || true
          cargo install --locked cargo-udeps || true
          cargo install --locked cargo-audit || true
          cargo install --locked cargo-pants || true

      ### Linting ###
      - name: check rust code
        run: |
          cargo deny check -c Deny.toml
          cargo outdated
          cargo udeps
          rm -rf ~/.cargo/advisory-db
          cargo audit
          cargo pants
        working-directory: src-tauri

      - name: check svelte code
        run: bun run check

      ### Build and test ###
      - name: build ui
        run: bun run build

      - name: test core
        run: cargo test --release ${{ matrix.args }}
        working-directory: src-tauri

      

        ### Publish ###
      - name: install committer
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: cargo install --locked committer || true

      - name: tag
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        id: tag
        run: |
          committer tag
          echo "COMMITTER_IS_NEW=$(cat .env/COMMITTER_IS_NEW)" >> $GITHUB_OUTPUT
          echo "COMMITTER_TAG=$(cat .env/COMMITTER_TAG)" >> $GITHUB_OUTPUT
      
      - name: upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: .env/COMMITTER_CHANGELOG
      
      - name: push tag to origin
        if: steps.tag.COMMITTER_IS_NEW == 'true' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: git push --tags origin

        # TODO: add tauri generated files to the release #
      - name: publish release
        if: steps.tag.COMMITTER_IS_NEW == 'true' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ steps.tag.COMMITTER_TAG }}
          releaseName: ${{ steps.tag.COMMITTER_TAG }}
          releaseDraft: true
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          projectPath: ./src-tauri
          args: ${{ matrix.args }}


  publish:
    runs-on: ubuntu-latest
    needs: cicd
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: create release 
        if: needs.cicd.outputs.COMMITTER_IS_NEW == 'true' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        uses: softprops/action-gh-release@v2
        with:
          files: target/release/*.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.cicd.outputs.COMMITTER_TAG }}
          body_path: .env/COMMITTER_CHANGELOG
          draft: false
