// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type Brick = { id: string; label: string; description: string; inputs: BrickHandle[]; outputs: BrickHandle[]; arguments: BrickArgument[] }

export type BrickArgument = { id: string; label: string; type: BrickArgumentType; enum_options: string[] | null; default_value: string | null }

export type BrickArgumentType = "String" | "Number" | "Boolean" | "Enum"

export type BrickHandle = { id: string; label: string }

export type Edge = { id: string; source: string; target: string }

export type Graph = { nodes: Node[]; edges: Edge[] }

export type Node = { id: string; position: Point; data: NodeData; type: string }

export type NodeData = { brick_id: string; brick?: Brick; arguments: Partial<{ [key in string]: string }> }

export type Point = { x: number; y: number }

const ARGS_MAP = { '':'{"get_brick":["brick_id"],"hello_world":["name"],"load_graph":["filename"],"save_graph":["graph","filename"]}' }
export type Router = { "": {get_brick: (brickId: string) => Promise<Brick>, 
hello_world: (name: string) => Promise<string>, 
load_graph: (filename: string) => Promise<Graph>, 
save_graph: (graph: Graph, filename: string) => Promise<string>} };


export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
export type { InferCommandOutput }
